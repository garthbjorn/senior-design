/*********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.22                          *
*        Compiled Jul  4 2013, 15:16:01                              *
*        (c) 2013 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*																	 *
*		Following the generation of this file I have implemented 	 *
*		the functionality described in the README to handle all 	 *
*		user input as well as allow for drawing to the screen.		 *
*																	 *
**********************************************************************
*/

#include "mbed.h"
#include "logos.h"
#include "DIALOG.h"
#include "WM.h"

extern volatile int seconds;

// Usful logo
extern U8 _acImage_0[5495];
// Boise State B
extern U8 _acImage_1[39378];
/*********************************************************************
*
*       Defines
*       EMWIN uses these defines for accessing the elements of the GUI
*       so they could be moved to a header file but I have left them
*       here for easy reference when coding.
*
**********************************************************************
*/
#define ID_WINDOW_0         (GUI_ID_USER + 0x03)
#define ID_BUTTON_0         (GUI_ID_USER + 0x07)
#define ID_BUTTON_1         (GUI_ID_USER + 0x08)
#define ID_IMAGE_0         (GUI_ID_USER + 0x12)
#define ID_TEXT_0       (GUI_ID_USER + 0x15)
#define ID_BUTTON_2       (GUI_ID_USER + 0x17)
#define ID_EDIT_0       (GUI_ID_USER + 0x1A)
#define ID_TEXT_1       (GUI_ID_USER + 0x1B)
#define ID_TEXT_2       (GUI_ID_USER + 0x1C)
#define ID_TEXT_3       (GUI_ID_USER + 0x1D)
#define ID_TEXT_4       (GUI_ID_USER + 0x1E)
#define ID_TEXT_5       (GUI_ID_USER + 0x1F)
#define ID_TEXT_6       (GUI_ID_USER + 0x20)
#define ID_EDIT_1       (GUI_ID_USER + 0x21)
#define ID_EDIT_2       (GUI_ID_USER + 0x22)
#define ID_EDIT_3       (GUI_ID_USER + 0x23)
#define ID_EDIT_4       (GUI_ID_USER + 0x24)
#define ID_EDIT_5       (GUI_ID_USER + 0x25)
#define ID_TEXT_7       (GUI_ID_USER + 0x26)
#define ID_TEXT_8       (GUI_ID_USER + 0x27)
#define ID_IMAGE_1       (GUI_ID_USER + 0x29)

#define ID_IMAGE_0_IMAGE_0       0x00
#define ID_IMAGE_1_IMAGE_0       0x01

#define ID_FRAMEWIN_0    (GUI_ID_USER + 0x2A)
#define ID_BUTTON_3    (GUI_ID_USER + 0x2B)
#define ID_BUTTON_4    (GUI_ID_USER + 0x2C)
#define ID_EDIT_6    (GUI_ID_USER + 0x2D)
#define ID_EDIT_7    (GUI_ID_USER + 0x2E)
#define ID_EDIT_8    (GUI_ID_USER + 0x2F)
#define ID_EDIT_9    (GUI_ID_USER + 0x30)
#define ID_EDIT_10    (GUI_ID_USER + 0x31)
#define ID_EDIT_11   (GUI_ID_USER + 0x33)
#define ID_EDIT_12    (GUI_ID_USER + 0x34)
#define ID_EDIT_13    (GUI_ID_USER + 0x35)
#define ID_EDIT_14    (GUI_ID_USER + 0x36)
#define ID_EDIT_15    (GUI_ID_USER + 0x37)
#define ID_EDIT_16    (GUI_ID_USER + 0x38)
#define ID_EDIT_17    (GUI_ID_USER + 0x39)
#define ID_TEXT_9    (GUI_ID_USER + 0x3A)
#define ID_TEXT_10    (GUI_ID_USER + 0x3B)
#define ID_TEXT_11    (GUI_ID_USER + 0x3C)
#define ID_TEXT_12    (GUI_ID_USER + 0x3D)
#define ID_TEXT_13    (GUI_ID_USER + 0x3F)
#define ID_TEXT_14    (GUI_ID_USER + 0x40)
#define ID_TEXT_15    (GUI_ID_USER + 0x41)
#define ID_TEXT_16    (GUI_ID_USER + 0x42)
#define ID_BUTTON_5    (GUI_ID_USER + 0x43)
#define ID_BUTTON_6    (GUI_ID_USER + 0x44)
#define ID_SLIDER_0		(GUI_ID_USER + 0x45)

#define ID_BUTTON_7		(GUI_ID_USER + 0x46)
#define ID_BUTTON_8		(GUI_ID_USER + 0x47)
#define ID_BUTTON_9		(GUI_ID_USER + 0x48)
#define ID_BUTTON_10		(GUI_ID_USER + 0x49)
#define ID_BUTTON_11		(GUI_ID_USER + 0x4A)
#define ID_BUTTON_12		(GUI_ID_USER + 0x4B)
#define ID_BUTTON_13		(GUI_ID_USER + 0x4C)
#define ID_BUTTON_14		(GUI_ID_USER + 0x4D)
#define ID_BUTTON_15		(GUI_ID_USER + 0x4E)
#define ID_BUTTON_16		(GUI_ID_USER + 0x4F)
#define ID_BUTTON_17		(GUI_ID_USER + 0x50)
#define ID_BUTTON_18		(GUI_ID_USER + 0x51)
#define ID_BUTTON_19		(GUI_ID_USER + 0x52)
#define ID_BUTTON_20		(GUI_ID_USER + 0x53)
#define ID_FRAMEWIN_1    (GUI_ID_USER + 0x54)
#define ID_EDIT_18			(GUI_ID_USER + 0x55)

#define ID_EDIT_19			(GUI_ID_USER + 0x56)
#define ID_EDIT_20			(GUI_ID_USER + 0x57)
#define ID_EDIT_21			(GUI_ID_USER + 0x58)
#define ID_EDIT_22			(GUI_ID_USER + 0x59)
#define ID_EDIT_23			(GUI_ID_USER + 0x5a)
#define ID_EDIT_24			(GUI_ID_USER + 0x5b)
#define ID_BUTTON_21		(GUI_ID_USER + 0x5c)
#define ID_BUTTON_22		(GUI_ID_USER + 0x5d)
#define ID_BUTTON_23		(GUI_ID_USER + 0x5e)
#define ID_TEXT_17			(GUI_ID_USER + 0x5f)


/*********************************************************************
*
*       Static data
*
**********************************************************************
*/
volatile bool numPadOpen = false;
extern PwmOut motor;
static float motors = 0;
char *convertIntToString(int i);
void start();
void stop();
void setProfile1();
void setProfile2();
void setProfile3();
void setProfileCust();
extern int values[3][6];
// Gas/Air/Time
int valuesId[3][6]={{ID_EDIT_6,ID_EDIT_8,ID_EDIT_10,ID_EDIT_12,ID_EDIT_14,ID_EDIT_16},{ID_EDIT_7,ID_EDIT_9,ID_EDIT_11,ID_EDIT_13,ID_EDIT_15,ID_EDIT_17},{ID_EDIT_19,ID_EDIT_20,ID_EDIT_21,ID_EDIT_22,ID_EDIT_23,ID_EDIT_24}};
enum type{
	GAS,
	AIR,
	TIME,
};
static int type;
static int id;
static volatile bool firstOn = true;

/*********************************************************************
*
*       _numPad
*       struct used by emWin to generate the numPad.
*       params are
*       type of widget, name, ID, x1, y1, xsize, ysize, NA,NA,NA
*/
static const GUI_WIDGET_CREATE_INFO _numPad[] = {
  { FRAMEWIN_CreateIndirect, "numPad", ID_FRAMEWIN_1, 240, 2, 560, 478, 0, 0x64, 0 },
  { BUTTON_CreateIndirect, "1", ID_BUTTON_7, 10, 90, 170, 60, 0, 0x0, 0 },
  { EDIT_CreateIndirect, "Edit", ID_EDIT_18, 0, 0, 550, 80, 0, 0x64, 0 },
  { BUTTON_CreateIndirect, "2", ID_BUTTON_8, 190, 90, 170, 60, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "3", ID_BUTTON_9, 370, 90, 170, 60, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "4", ID_BUTTON_10, 10, 160, 170, 60, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "7", ID_BUTTON_11, 10, 230, 170, 60, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "C", ID_BUTTON_12, 10, 300, 170, 60, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Back", ID_BUTTON_13, 10, 370, 260, 70, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Save", ID_BUTTON_14, 280, 370, 260, 70, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "5", ID_BUTTON_15, 190, 160, 170, 60, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "0", ID_BUTTON_16, 190, 300, 170, 60, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "8", ID_BUTTON_17, 190, 230, 170, 60, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "6", ID_BUTTON_18, 370, 160, 170, 60, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Del", ID_BUTTON_19, 370, 300, 170, 60, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "9", ID_BUTTON_20, 370, 230, 170, 60, 0, 0x0, 0 },
};

/*********************************************************************
*
*       _aDialogCreate
*       struct used by emWin to generate the mainWin.
*       params are
*       type of widget, name, ID, x1, y1, xsize, ysize, NA,NA,NA
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { WINDOW_CreateIndirect, "MainScreen", ID_WINDOW_0, 0, 0, 800, 480, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "startButton", ID_BUTTON_0, 5, 135, 240, 90, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "stopButton", ID_BUTTON_1, 5, 230, 240, 150, 0, 0x0, 0 },
  { IMAGE_CreateIndirect, "Logo", ID_IMAGE_0, 5, 385, 160, 93, 0, IMAGE_CF_TILE | IMAGE_CF_ALPHA | IMAGE_CF_AUTOSIZE, 0 },
  { TEXT_CreateIndirect, "Automatic Glass Polisher Prototype", ID_TEXT_0, 165, 5, 470, 30, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "setupButton", ID_BUTTON_2, 5, 40, 240, 90, 0, 0x0, 0 },
  { EDIT_CreateIndirect, "CurrentTempBox", ID_EDIT_0, 355, 75, 80, 40, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "currentTemp", ID_TEXT_1, 325, 50, 150, 31, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "targetTemp", ID_TEXT_2, 550, 50, 133, 26, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "rollerSpeed", ID_TEXT_3, 327, 150, 133, 26, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "currentSegTime", ID_TEXT_4, 500, 150, 238, 27, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "totalElapsedTime", ID_TEXT_5, 297, 250, 196, 31, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "timeToComplee", ID_TEXT_6, 533, 249, 191, 31, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "TargetTempBox", ID_EDIT_1, 575, 75, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "RollerSpeedBox", ID_EDIT_2, 355, 175, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "CurrentSegBox", ID_EDIT_3, 575, 175, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "TotalElapsedBox", ID_EDIT_4, 355, 275, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "TimeToBox", ID_EDIT_5, 575, 275, 80, 40, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "Text", ID_TEXT_7, 445, 80, 28, 29, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "Text", ID_TEXT_8, 663, 80, 28, 34, 0, 0x64, 0 },
  { IMAGE_CreateIndirect, "Image", ID_IMAGE_1, 682, 388, 113, 87, 0, IMAGE_CF_AUTOSIZE, 0 },
  { SLIDER_CreateIndirect, "Slider", ID_SLIDER_0, 250, 380, 300, 50, 0, 0x0, 0 },
};
/*********************************************************************
*
*       _aSetupCreate
*       struct used by emWin to generate the setupWin.
*       params are
*       type of widget, name, ID, x1, y1, xsize, ysize, NA,NA,NA
*/
static const GUI_WIDGET_CREATE_INFO _aSetupCreate[] = {
  { FRAMEWIN_CreateIndirect, "SetupWin", ID_FRAMEWIN_0, 5, 5, 790, 470, 0, 0x64, 0 },
  { BUTTON_CreateIndirect, "Up", ID_BUTTON_3, 45, 20, 100, 80, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Down", ID_BUTTON_4, 45, 130, 100, 80, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "P1", ID_BUTTON_21, 155, 20, 100, 80, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "P2", ID_BUTTON_22, 155, 130, 100, 80, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "P3", ID_BUTTON_23, 155, 240, 100, 80, 0, 0x0, 0 },
  { EDIT_CreateIndirect, "Gas1", ID_EDIT_6, 320, 40, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Air1", ID_EDIT_7, 450, 40, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Time1", ID_EDIT_19, 580, 40, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Gas2", ID_EDIT_8, 320, 100, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Air2", ID_EDIT_9, 450, 100, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Time2", ID_EDIT_20, 580, 100, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Gas3", ID_EDIT_10, 320, 160, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Air3", ID_EDIT_11, 450, 160, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Time3", ID_EDIT_21, 580, 160, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Gas4", ID_EDIT_12, 320, 220, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Air4", ID_EDIT_13, 450, 220, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Time4", ID_EDIT_22, 580, 220, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Gas5", ID_EDIT_14, 320, 280, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Air5", ID_EDIT_15, 450, 280, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Time5", ID_EDIT_23, 580, 280, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Gas6", ID_EDIT_16, 320, 340, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Air6", ID_EDIT_17, 450, 340, 80, 40, 0, 0x64, 0 },
  { EDIT_CreateIndirect, "Time6", ID_EDIT_24, 580, 340, 80, 40, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "Gas Ticks", ID_TEXT_9, 300, 10, 100, 20, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "Air Ticks", ID_TEXT_10, 440, 10, 90, 20, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "Time (s)", ID_TEXT_17, 580, 10, 80, 20, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "One", ID_TEXT_11, 290, 50, 80, 20, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "Two", ID_TEXT_12, 290, 110, 80, 20, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "Four", ID_TEXT_13, 290, 230, 80, 20, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "Four", ID_TEXT_14, 290, 290, 80, 20, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "Six", ID_TEXT_15, 290, 350, 80, 20, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "Three", ID_TEXT_16, 290, 170, 80, 20, 0, 0x64, 0 },
  { BUTTON_CreateIndirect, "Save", ID_BUTTON_5, 50, 350, 200, 60, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "numP", ID_BUTTON_6, 45, 240, 100, 80, 0, 0x0, 0 },
};

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/
/*********************************************************************
*
*       _GetImageById
*       EMWIN function to get an image from a c file
*/
static const void * _GetImageById(U32 Id, U32 * pSize) {
  switch (Id) {
  case ID_IMAGE_0_IMAGE_0:
    *pSize = sizeof(_acImage_0);
    return (const void *)_acImage_0;
  case ID_IMAGE_1_IMAGE_0:
    *pSize = sizeof(_acImage_1);
    return (const void *)_acImage_1;
  }
  return NULL;
}

/*********************************************************************
*
*       _cbnumPad
*       Basic callback for handling the inputs experienced by the
*       numPad as well as the drawing of it each time it is called.
*/
static void _cbnumPad(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
  int     NCode;
  int     Id;

  switch (pMsg->MsgId) {
  case WM_INIT_DIALOG:
    //
    // Initialization of 'numPad'
    //
    hItem = pMsg->hWin;
    FRAMEWIN_SetTitleHeight(hItem, 25);
//    FRAMEWIN_SetText(hItem, titles[title]);
    FRAMEWIN_SetFont(hItem, GUI_FONT_24B_ASCII);
    FRAMEWIN_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    FRAMEWIN_SetTextColor(hItem, 0x00000000);

    //
    // Initialization of 'Edit'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_18);
    EDIT_SetText(hItem, "");
    EDIT_SetFont(hItem, GUI_FONT_D48);
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);

		//
    // Initialization of '1'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_7);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "1");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of '2'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_8);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "2");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of '3'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_9);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "3");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of '4'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_10);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "4");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of '7'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_11);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "7");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of 'C'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_12);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "C");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of 'Back'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_13);
    BUTTON_SetFont(hItem, GUI_FONT_24B_ASCII);
    BUTTON_SetText(hItem, "Back");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of 'Save'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_14);
    BUTTON_SetFont(hItem, GUI_FONT_24B_ASCII);
    BUTTON_SetText(hItem, "Save");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of '5'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_15);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "5");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of '0'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_16);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "0");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of '8'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_17);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "8");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of '6'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_18);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "6");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of 'Del'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_19);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "Del");
		BUTTON_SetFocussable(hItem, 0);

    //
    // Initialization of '9'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_20);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "9");
		BUTTON_SetFocussable(hItem, 0);
    break;

  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
    NCode = pMsg->Data.v;
		int Key;
    switch(Id) {

			case ID_EDIT_18: // Notifications sent by 'Edit'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  // This is always the focus of a numPad so no reason to react
    	  // on a touch.
        break;
      }
      break;

    case ID_BUTTON_7: // Notifications sent by '1'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
				Key = 49;
				GUI_SendKeyMsg(Key, 1);       /* Send a key message to the focussed window */
        break;
      }
      break;

    case ID_BUTTON_8: // Notifications sent by '2'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
				Key = 50;
				GUI_SendKeyMsg(Key, 1);       /* Send a key message to the focussed window */
        break;
      }
      break;
    case ID_BUTTON_9: // Notifications sent by '3'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
				Key = 51;
				GUI_SendKeyMsg(Key, 1);       /* Send a key message to the focussed window */
        break;
      }
      break;
    case ID_BUTTON_10: // Notifications sent by '4'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
				Key = 52;
				GUI_SendKeyMsg(Key, 1);       /* Send a key message to the focussed window */
        break;
      }
      break;
    case ID_BUTTON_11: // Notifications sent by '7'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
				Key = 55;
				GUI_SendKeyMsg(Key, 1);       /* Send a key message to the focussed window */
        break;
      }
      break;
    case ID_BUTTON_12: // Notifications sent by 'C'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
        break;
      }
      break;
    case ID_BUTTON_13: // Notifications sent by 'Back'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
				numPadOpen = false;
				GUI_EndDialog(pMsg->hWin,0);
        break;
      }
      break;
    case ID_BUTTON_14: // Notifications sent by 'Save'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  // Get the value of the editable field and put it into our
    	  // array at the present index selected and writing that value
    	  // to the window
    	  hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_18);
          char txt[5];
          EDIT_GetText(hItem, txt, 5);
          values[type][id] = atoi(txt);
          hItem = WM_GetDialogItem(WM_GetParent(pMsg->hWin), valuesId[type][id]);
          EDIT_SetText(hItem,txt);
          numPadOpen = false;
       	  GUI_EndDialog(pMsg->hWin, 0);
        break;
      }
      break;
    case ID_BUTTON_15: // Notifications sent by '5'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
				Key = 53;
				GUI_SendKeyMsg(Key, 1);       /* Send a key message to the focussed window */
        break;
      }
      break;
    case ID_BUTTON_16: // Notifications sent by '0'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
				Key = 48;
				GUI_SendKeyMsg(Key, 1);       /* Send a key message to the focussed window */
        break;
      }
      break;
    case ID_BUTTON_17: // Notifications sent by '8'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
				Key = 56;
				GUI_SendKeyMsg(Key, 1);       /* Send a key message to the focussed window */
        break;
      }
      break;
    case ID_BUTTON_18: // Notifications sent by '6'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
				Key = 54;
				GUI_SendKeyMsg(Key, 1);       /* Send a key message to the focussed window */
        break;
      }
      break;
    case ID_BUTTON_19: // Notifications sent by 'Del'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
				Key = GUI_KEY_BACKSPACE;
				GUI_SendKeyMsg(Key, 1);       /* Send a key message to the focussed window */
        break;
      }
      break;
    case ID_BUTTON_20: // Notifications sent by '9'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
				Key = 57;
				GUI_SendKeyMsg(Key, 1);       /* Send a key message to the focussed window */
        break;
      }
      break;

    }
    break;
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       _cbSetup
*       Basic callback for handling the inputs experienced by the
*       setupWin as well as the drawing of it each time it is called.
*/
static void _cbSetup(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
  int     NCode;
  int     Id;
  switch (pMsg->MsgId) {
  case WM_INIT_DIALOG:
    //
    // Initialization of 'SetupWin'
    //
    hItem = pMsg->hWin;
    FRAMEWIN_SetText(hItem, "SETUP");
    FRAMEWIN_SetFont(hItem, GUI_FONT_24B_ASCII);
    FRAMEWIN_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    FRAMEWIN_SetTextColor(hItem, 0x000000FF);
    //
    // Initialization of 'Up'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_3);
    BUTTON_SetText(hItem, "Up");
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    //
    // Initialization of 'Down'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_4);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "Down");
    //
    // Initialization of 'Tick1'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_6);
    EDIT_SetText(hItem, convertIntToString(values[GAS][0]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Time1'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_7);
    EDIT_SetText(hItem, convertIntToString(values[AIR][0]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Tick2'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_8);
    EDIT_SetText(hItem, convertIntToString(values[GAS][1]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Time2'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_9);
    EDIT_SetText(hItem, convertIntToString(values[AIR][1]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Tick3'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_10);
    EDIT_SetText(hItem, convertIntToString(values[GAS][2]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Time3'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_11);
    EDIT_SetText(hItem, convertIntToString(values[AIR][2]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Tick4'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_12);
    EDIT_SetText(hItem, convertIntToString(values[GAS][3]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Time4'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_13);
    EDIT_SetText(hItem, convertIntToString(values[AIR][3]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Tick5'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_14);
    EDIT_SetText(hItem, convertIntToString(values[GAS][4]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Time5'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_15);
    EDIT_SetText(hItem, convertIntToString(values[AIR][4]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Tick6'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_16);
    EDIT_SetText(hItem, convertIntToString(values[GAS][5]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Time6'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_17);
    EDIT_SetText(hItem, convertIntToString(values[AIR][5]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Time6'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_19);
    EDIT_SetText(hItem, convertIntToString(values[TIME][0]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Time6'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_20);
    EDIT_SetText(hItem, convertIntToString(values[TIME][1]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Time6'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_21);
    EDIT_SetText(hItem, convertIntToString(values[TIME][2]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Time6'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_22);
    EDIT_SetText(hItem, convertIntToString(values[TIME][3]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Time6'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_23);
    EDIT_SetText(hItem, convertIntToString(values[TIME][4]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Time6'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_24);
    EDIT_SetText(hItem, convertIntToString(values[TIME][5]));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'Ticks'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_9);
    TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
    TEXT_SetText(hItem, "Gas Ticks");
    TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    //
    // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_10);
    TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
    TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    TEXT_SetTextColor(hItem, 0x00000000);
    TEXT_SetText(hItem, "Air Ticks");
    //
    // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_17);
    TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
    TEXT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    TEXT_SetTextColor(hItem, 0x00000000);
    TEXT_SetText(hItem, "Time (s)");
    //
    // Initialization of 'One'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_11);
    TEXT_SetText(hItem, "1");
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //
    // Initialization of 'Two'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_12);
    TEXT_SetText(hItem, "2");
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //
    // Initialization of 'Four'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_13);
    TEXT_SetText(hItem, "4");
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //
    // Initialization of 'Four'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_14);
    TEXT_SetTextColor(hItem, 0x00000000);
    TEXT_SetText(hItem, "5");
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //
    // Initialization of 'Six'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_15);
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    TEXT_SetText(hItem, "6");
    //
    // Initialization of 'Three'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_16);
    TEXT_SetText(hItem, "3");
    TEXT_SetFont(hItem, GUI_FONT_20B_ASCII);
    //
    // Initialization of 'Save'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_5);
    BUTTON_SetText(hItem, "Save");
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    //
    // Initialization of 'numP'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_6);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "#");
    //
    // Initialization of 'Down'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_21);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "P1");
    //
    // Initialization of 'Down'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_22);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "P2");
    //
    // Initialization of 'Down'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_23);
    BUTTON_SetFont(hItem, GUI_FONT_20B_ASCII);
    BUTTON_SetText(hItem, "P3");
    break;
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
    NCode = pMsg->Data.v;
    switch(Id) {
    case ID_BUTTON_3: // Notifications sent by 'Up'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	values[type][id]++;
    	hItem = WM_GetDialogItem(pMsg->hWin,valuesId[type][id]);
    	EDIT_SetText(hItem,convertIntToString(values[type][id]));
        break;
      }
      break;
    case ID_BUTTON_4: // Notifications sent by 'Down'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	if(values[type][id] == 0)
    		break;
    	values[type][id]--;
    	hItem = WM_GetDialogItem(pMsg->hWin,valuesId[type][id]);
    	EDIT_SetText(hItem,convertIntToString(values[type][id]));
        break;
      }
      break;
    /*****************************************************************
     *
     * Selecting any of the editable fields will put that point in our
     * values array in focus so that it can be modified by the numPad
     * or the up and down buttons
     *
     ****************************************************************/
    case ID_EDIT_6: // Notifications sent by 'Air1'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  type = GAS;
    	  id = 0;
        break;
      }
      break;
    case ID_EDIT_7: // Notifications sent by 'Air1'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  type = AIR;
    	  id = 0;
        break;
      }
      break;
    case ID_EDIT_8: // Notifications sent by 'Gas2'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  type = GAS;
    	  id = 1;
        break;
      }
      break;
    case ID_EDIT_9: // Notifications sent by 'Air2'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  type = AIR;
    	  id = 1;
        break;
      }
      break;
    case ID_EDIT_10: // Notifications sent by 'Gas3'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  type = GAS;
    	  id = 2;
        break;
      }
      break;
    case ID_EDIT_11: // Notifications sent by 'Air3'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  type = AIR;
    	  id = 2;
        break;
      }
      break;
    case ID_EDIT_12: // Notifications sent by 'Gas4'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  type = GAS;
    	  id = 3;
        break;
      }
      break;
    case ID_EDIT_13: // Notifications sent by 'Air4'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  type = AIR;
    	  id = 3;
        break;
      }
      break;
    case ID_EDIT_14: // Notifications sent by 'Gas5'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  type = GAS;
    	  id = 4;
        break;
      }
      break;
    case ID_EDIT_15: // Notifications sent by 'Air5'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  type = AIR;
    	  id = 4;
        break;
      }
      break;
    case ID_EDIT_16: // Notifications sent by 'Gas6'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  type = GAS;
    	  id = 5;
        break;
      }
      break;
    case ID_EDIT_17: // Notifications sent by 'Air6'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  type = AIR;
    	  id = 5;
        break;
      }
      break;
	  case ID_EDIT_19: // Notifications sent by 'Time1'
		switch(NCode) {
		case WM_NOTIFICATION_RELEASED:
		  type = TIME;
		  id = 0;
		  break;
		}
		break;
	case ID_EDIT_20: // Notifications sent by 'Time2'
	  switch(NCode) {
	  case WM_NOTIFICATION_RELEASED:
		  type = TIME;
		  id = 1;
		break;
	  }
	  break;
  case ID_EDIT_21: // Notifications sent by 'Time3'
	switch(NCode) {
	case WM_NOTIFICATION_RELEASED:
	  type = TIME;
	  id = 2;
	  break;
	}
	break;
	case ID_EDIT_22: // Notifications sent by 'Time4'
	  switch(NCode) {
	  case WM_NOTIFICATION_RELEASED:
		  type = TIME;
		  id = 3;
		break;
	  }
	  break;
	  case ID_EDIT_23: // Notifications sent by 'Time5'
		switch(NCode) {
		case WM_NOTIFICATION_RELEASED:
		  type = TIME;
		  id = 4;
		  break;
		}
		break;
	case ID_EDIT_24: // Notifications sent by 'Time6'
	  switch(NCode) {
	  case WM_NOTIFICATION_RELEASED:
		  type = TIME;
		  id = 5;
		break;
	  }
	  break;

    case ID_BUTTON_5: // Notifications sent by 'Save'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	setProfileCust();
       	GUI_EndDialog(pMsg->hWin, 0);
        break;
      }
      break;
    case ID_BUTTON_6: // Notifications sent by 'numP'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	  // Execute the numPad but don't allow multiple instances
		if(!numPadOpen){
			numPadOpen = true;
			GUI_ExecDialogBox(_numPad, GUI_COUNTOF(_numPad), &_cbnumPad, pMsg->hWin, -200, 0);
		}
        break;
      }
      break;
	  case ID_BUTTON_21: // Notifications sent by 'p1'
			switch(NCode) {
			case WM_NOTIFICATION_RELEASED:
				setProfile1();
				GUI_EndDialog(pMsg->hWin, 0);
			  break;
			}
			break;
		case ID_BUTTON_22: // Notifications sent by 'p2'
			  switch(NCode) {
			  case WM_NOTIFICATION_RELEASED:
				  setProfile2();
				  GUI_EndDialog(pMsg->hWin, 0);
				break;
			  }
			  break;
		  case ID_BUTTON_23: // Notifications sent by 'p3'
				switch(NCode) {
				case WM_NOTIFICATION_RELEASED:
					setProfile3();
					GUI_EndDialog(pMsg->hWin, 0);
				  break;
				}
				break;
    }
    break;
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       _cbDialog
*       Basic callback for handling the inputs experienced by the
*       mainWin as well as the drawing of it each time it is called.
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
  const void * pData;
  WM_HWIN      hItem;
  U32          FileSize;
  int          NCode;
  int          Id;
  if(firstOn){
	  //************************************************************************
	  motor = 0;			// Disable to motor on init of menu
	  firstOn = false;
	  //************************************************************************
  }

  WM_MULTIBUF_Enable(0);
  switch (pMsg->MsgId) {
  case WM_INIT_DIALOG:
    //
    // Initialization of 'MainScreen'
    //
    hItem = pMsg->hWin;
    WINDOW_SetBkColor(hItem, 0x00FF0000);
    //
    // Initialization of 'startButton'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_0);
    BUTTON_SetFont(hItem, GUI_FONT_32B_ASCII);
    BUTTON_SetText(hItem, "START");
    //
    // Initialization of 'stopButton'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_1);
    BUTTON_SetFont(hItem, GUI_FONT_32B_ASCII);
    BUTTON_SetText(hItem, "STOP");
    //
    // Initialization of 'Logo'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_IMAGE_0);
    pData = _GetImageById(ID_IMAGE_0_IMAGE_0, &FileSize);
    IMAGE_SetPNG(hItem, pData, FileSize);
    //
    // Initialization of 'Automatic Glass Polisher Prototype'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
    TEXT_SetFont(hItem, GUI_FONT_32B_ASCII);
    //
    // Initialization of 'setupButton'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_2);
    BUTTON_SetFont(hItem, GUI_FONT_32B_ASCII);
    BUTTON_SetText(hItem, "Setup");
    //
    // Initialization of 'CurrentTempBox'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_0);
    EDIT_SetText(hItem, "739");
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_32B_ASCII);
    //
    // Initialization of 'currentTemp'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
    TEXT_SetText(hItem, "Current Temp");
    TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'targetTemp'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
    TEXT_SetTextColor(hItem, 0x00000000);
    TEXT_SetText(hItem, "Target Temp");
    TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'rollerSpeed'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
    TEXT_SetText(hItem, "Roller Speed");
    TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'currentSegTime'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_TOP);
    TEXT_SetText(hItem, "Current Segment Time");
    TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'totalElapsedTime'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_5);
    TEXT_SetTextColor(hItem, 0x00000000);
    TEXT_SetText(hItem, "Total Elapsed Time");
    TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'timeToComplee'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_6);
    TEXT_SetText(hItem, "Time To Complete");
    TEXT_SetTextColor(hItem, 0x00000000);
    TEXT_SetFont(hItem, GUI_FONT_24B_ASCII);
    //
    // Initialization of 'TargetTempBox'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_1);
    EDIT_SetText(hItem, "740");
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_32B_ASCII);
    //
    // Initialization of 'RollerSpeedBox'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_2);
    EDIT_SetText(hItem, "40");
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_32B_ASCII);
    //
    // Initialization of 'CurrentSegBox'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_3);
    EDIT_SetText(hItem, "15");
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_32B_ASCII);
    //
    // Initialization of 'TotalElapsedBox'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_4);
    EDIT_SetText(hItem, convertIntToString(seconds));
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    EDIT_SetFont(hItem, GUI_FONT_32B_ASCII);
    //
    // Initialization of 'TimeToBox'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_5);
    EDIT_SetText(hItem, "650");
    EDIT_SetFont(hItem, GUI_FONT_32B_ASCII);
    EDIT_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
    //
    // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_7);
    TEXT_SetFont(hItem, GUI_FONT_32B_ASCII);
    TEXT_SetText(hItem, "C");
    //
    // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_8);
    TEXT_SetFont(hItem, GUI_FONT_32B_ASCII);
    TEXT_SetText(hItem, "C");
    //
    // Initialization of 'Image'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_IMAGE_1);
    pData = _GetImageById(ID_IMAGE_1_IMAGE_0, &FileSize);
    IMAGE_SetBMP(hItem, pData, FileSize);

	hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_0);
	SLIDER_SetRange(hItem, 0,100);
	SLIDER_SetValue(hItem, motors);
    break;
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
    NCode = pMsg->Data.v;
    switch(Id) {
    case ID_BUTTON_0: // Notifications sent by 'startButton'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
		motor = motors/100;
		start();
        break;
      }
      break;
    case ID_BUTTON_1: // Notifications sent by 'stopButton'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
        motor = 0;
        stop();
        break;
      }
      break;
    case ID_BUTTON_2: // Notifications sent by 'setupButton'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
    	// Execute the settings window.
		GUI_ExecDialogBox(_aSetupCreate, GUI_COUNTOF(_aSetupCreate), &_cbSetup, pMsg->hWin, 0, 0);
        break;
      }
      break;
    case ID_EDIT_0: // Notifications sent by 'CurrentTempBox'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
        break;
      }
      break;
    case ID_EDIT_1: // Notifications sent by 'TargetTempBox'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
        break;
      }
      break;
    case ID_EDIT_2: // Notifications sent by 'RollerSpeedBox'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
        break;
      }
      break;
    case ID_EDIT_3: // Notifications sent by 'CurrentSegBox'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
        break;
      }
      break;
    case ID_EDIT_4: // Notifications sent by 'TotalElapsedBox'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
        break;
      }
      break;
    case ID_EDIT_5: // Notifications sent by 'TimeToBox'
      switch(NCode) {
      case WM_NOTIFICATION_RELEASED:
        break;
      }
      break;
	case ID_SLIDER_0: // Notifications sent by 'Slider'
        switch(NCode) {
        case WM_NOTIFICATION_VALUE_CHANGED:
        	/*
        	 * Here we get the ID for the slider and set the motors placeholder to that
        	 * value and then set the duty cycle accordingly. Finally we write that new
        	 * value as a string to the field associated with motor speed.
        	 */
			hItem = WM_GetDialogItem(pMsg->hWin,ID_SLIDER_0);
      		motors = SLIDER_GetValue(hItem);
      		motor=motors/100;
      		hItem = WM_GetDialogItem(WM_GetParent(pMsg->hWin), ID_EDIT_2);
      		EDIT_SetText(hItem,convertIntToString(motors));
            break;
        }
        break;
    }
    break;
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreateHome
*/
WM_HWIN CreateHome(void);
WM_HWIN CreateHome(void) {
  WM_HWIN hWin;
  motor = 0;
  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
  return hWin;
}

/*************************** End of file ****************************/
